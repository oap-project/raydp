# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
"""Client and server classes corresponding to protobuf-defined services."""
import grpc

import network_pb2 as network__pb2


class DriverServiceStub(object):
    """Driver Service definition
    """

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.RegisterAgent = channel.unary_unary(
                '/DriverService/RegisterAgent',
                request_serializer=network__pb2.AgentRegisterRequest.SerializeToString,
                response_deserializer=network__pb2.AgentRegisterReply.FromString,
                )
        self.RegisterWorker = channel.unary_unary(
                '/DriverService/RegisterWorker',
                request_serializer=network__pb2.WorkerRegisterRequest.SerializeToString,
                response_deserializer=network__pb2.WorkerRegisterReply.FromString,
                )
        self.SendFunctionResult = channel.unary_unary(
                '/DriverService/SendFunctionResult',
                request_serializer=network__pb2.FunctionResult.SerializeToString,
                response_deserializer=network__pb2.Empty.FromString,
                )


class DriverServiceServicer(object):
    """Driver Service definition
    """

    def RegisterAgent(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def RegisterWorker(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def SendFunctionResult(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_DriverServiceServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'RegisterAgent': grpc.unary_unary_rpc_method_handler(
                    servicer.RegisterAgent,
                    request_deserializer=network__pb2.AgentRegisterRequest.FromString,
                    response_serializer=network__pb2.AgentRegisterReply.SerializeToString,
            ),
            'RegisterWorker': grpc.unary_unary_rpc_method_handler(
                    servicer.RegisterWorker,
                    request_deserializer=network__pb2.WorkerRegisterRequest.FromString,
                    response_serializer=network__pb2.WorkerRegisterReply.SerializeToString,
            ),
            'SendFunctionResult': grpc.unary_unary_rpc_method_handler(
                    servicer.SendFunctionResult,
                    request_deserializer=network__pb2.FunctionResult.FromString,
                    response_serializer=network__pb2.Empty.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'DriverService', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))


 # This class is part of an EXPERIMENTAL API.
class DriverService(object):
    """Driver Service definition
    """

    @staticmethod
    def RegisterAgent(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/DriverService/RegisterAgent',
            network__pb2.AgentRegisterRequest.SerializeToString,
            network__pb2.AgentRegisterReply.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def RegisterWorker(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/DriverService/RegisterWorker',
            network__pb2.WorkerRegisterRequest.SerializeToString,
            network__pb2.WorkerRegisterReply.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def SendFunctionResult(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/DriverService/SendFunctionResult',
            network__pb2.FunctionResult.SerializeToString,
            network__pb2.Empty.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)


class WorkerServiceStub(object):
    """Worker Service
    """

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.RunFunction = channel.unary_unary(
                '/WorkerService/RunFunction',
                request_serializer=network__pb2.Function.SerializeToString,
                response_deserializer=network__pb2.Empty.FromString,
                )
        self.Stop = channel.unary_unary(
                '/WorkerService/Stop',
                request_serializer=network__pb2.Empty.SerializeToString,
                response_deserializer=network__pb2.Empty.FromString,
                )


class WorkerServiceServicer(object):
    """Worker Service
    """

    def RunFunction(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def Stop(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_WorkerServiceServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'RunFunction': grpc.unary_unary_rpc_method_handler(
                    servicer.RunFunction,
                    request_deserializer=network__pb2.Function.FromString,
                    response_serializer=network__pb2.Empty.SerializeToString,
            ),
            'Stop': grpc.unary_unary_rpc_method_handler(
                    servicer.Stop,
                    request_deserializer=network__pb2.Empty.FromString,
                    response_serializer=network__pb2.Empty.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'WorkerService', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))


 # This class is part of an EXPERIMENTAL API.
class WorkerService(object):
    """Worker Service
    """

    @staticmethod
    def RunFunction(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/WorkerService/RunFunction',
            network__pb2.Function.SerializeToString,
            network__pb2.Empty.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def Stop(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/WorkerService/Stop',
            network__pb2.Empty.SerializeToString,
            network__pb2.Empty.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)
